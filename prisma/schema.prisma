// This Prisma schema defines the database structure for the Italian learning app
// including NextAuth tables, flashcards, spaced-repetition tracking, and review logs.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// USERS & AUTH -------------------------------------------------------------
model User {
  id             String             @id @default(cuid())
  name           String?
  email          String?            @unique
  emailVerified  DateTime?
  image          String?

  // For email/password credentials login (hashed with bcrypt)
  hashedPassword String?

  // NextAuth relations
  accounts       Account[]
  sessions       Session[]

  // Learning relations
  progress       UserFlashcard[]
  reviews        Review[]

  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  id          String   @id @default(cuid())
  identifier  String
  token       String   @unique
  expires     DateTime

  @@unique([identifier, token])
}

/// LEARNING MODELS ----------------------------------------------------------

// A single vocabulary or phrase card
model Flashcard {
  id          String          @id @default(cuid())
  front       String          // Italian word/phrase
  back        String          // Translation / meaning
  example     String?         // Example sentence
  partOfSpeech String?        // noun, verb, etc.

  // Relations
  progress    UserFlashcard[]
  reviews     Review[]

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

// Per-user spaced-repetition metadata for a flashcard
model UserFlashcard {
  id            String     @id @default(cuid())
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  flashcard     Flashcard  @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  flashcardId   String

  easeFactor    Float      @default(2.5)   // SM-2 algorithm ease factor
  interval      Int        @default(1)     // interval in days
  repetitions   Int        @default(0)
  dueDate       DateTime
  lastReviewed  DateTime?

  correctStreak   Int      @default(0)
  incorrectStreak Int      @default(0)

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([userId, flashcardId])
}

// Log of every review event (optional but useful for analytics)
model Review {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  flashcard    Flashcard  @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  flashcardId  String

  grade        Int        // e.g. 0-5 score used by SM-2 algorithm
  reviewedAt   DateTime   @default(now())
} 